rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Utility functions
    function isSignedIn() { return request.auth != null; }
    function isOwner(uid) { return isSignedIn() && request.auth.uid == uid; }
    function isPolice() { return isSignedIn() && request.auth.token.role == 'police'; }

    // USERS root documents
    match /users/{uid} {
      // Preserve original: owner OR police can read, only owner can write
      allow read: if isOwner(uid) || isPolice();
      allow write: if isOwner(uid);

      // Nested alerts hierarchy: users/{uid}/alerts/{state}/items/{alertId}
      // states: active | past (or others in future)
      match /alerts/{state}/{subPath=**} {
        // Police can read; owner can read
        allow read: if isOwner(uid) || isPolice();
        
        // Owner can create only under 'active'
        allow create: if isOwner(uid) && state == 'active';

        // Owner can resolve an active alert by setting resolvedAt; keep other fields immutable
        allow update: if isOwner(uid) && state == 'active'
                      && resource.data.resolvedAt == null
                      && request.resource.data.resolvedAt is timestamp
                      && request.resource.data.type == resource.data.type
                      && request.resource.data.location == resource.data.location
                      && request.resource.data.extra == resource.data.extra
                      && request.resource.data.triggeredAt == resource.data.triggeredAt;

        // Disallow deletes by default (adjust if you need an archive/cleanup flow)
        allow delete: if false;
      }

      // (Optional) If you later store other subcollections under users/{uid}, they remain locked by fallback unless added explicitly.
    }

    // Fallback deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
